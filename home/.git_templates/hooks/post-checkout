#!/bin/bash

# Git post-checkout hook for automated use of directory-local git config
# https://stackoverflow.com/a/40450106

# Check for custom git-config flag, to execute hook only once on clone, not repeatedly on every checkout
if [[ -f .git/config ]]
then
    grep -q "inferredConfig" .git/config && exit
else
    # probably a submodule or worktree, fall back to git config (exits non-zero if unset)
    git config user.inferredConfig >/dev/null && exit
fi

# Automatically set Git config values from parent folders.

# Go upwards in directory hierarchy, examine all .gitconfig files we find
# Allows to have multiple nested .gitconfig files with different scopes
dir=$(pwd)
configFiles=()
while [ "$dir" != "/" ]
do
    # Skip first directory (the newly created Git repo)
    dir=$(dirname "$dir")
    if [ -f "$dir/.gitconfig" ]
    then
        configFiles+=("$dir/.gitconfig")
    fi
done

printed_header=n
# Iterate through configFiles array in reverse order, so that more local configurations override parent ones
for (( index=${#configFiles[@]}-1 ; index>=0 ; index-- )) ; do
    gitconfig="${configFiles[index]}"

    printed_source=n
    # Iterate over each line in found .gitconfig file
    output=$(git config --file "$gitconfig" --list)
    while IFS= read -r line
    do
        # Split line into two parts, separated by '='
        IFS='=' read -r key localValue <<< "$line"

        # For values that differ from the parent Git configuration, adjust the local one
        parentValue=$(git config "$key")
        if [ "$parentValue" != "$localValue" ]
        then
            if [ "$printed_source" = n ]; then
                if [ "$printed_header" = n ]; then
                    echo "Infer Git configuration from directory..."
                    printed_header=y
                fi
                echo "* From $gitconfig:"
                printed_source=y
            fi
            echo "  * $key: $localValue (overrides $parentValue)"
            git config "$key" "$localValue"
        fi
    done <<< "$output"

    # Set custom flag that we have inferred the configuration, so that future checkouts don't need to do it
    git config user.inferredConfig 1
done
